diff -urN src/6.8.0-ubuntu/file.c new/6.8.0-ubuntu/file.c
--- src/6.8.0-ubuntu/file.c	2025-10-02 03:58:07.894568646 +0800
+++ new/6.8.0-ubuntu/file.c	2025-10-02 03:58:02.137396777 +0800
@@ -2601,14 +2601,14 @@
 		 * translate it into the caller's pid namespace.
 		 */
 		rcu_read_lock();
-		fl->fl_pid = pid_nr_ns(find_pid_ns(ffl->pid, fc->pid_ns), &init_pid_ns);
+		fl->c.flc_pid = pid_nr_ns(find_pid_ns(ffl->pid, fc->pid_ns), &init_pid_ns);
 		rcu_read_unlock();
 		break;
 
 	default:
 		return -EIO;
 	}
-	fl->fl_type = ffl->type;
+	fl->c.flc_type = ffl->type;
 	return 0;
 }
 
@@ -2622,10 +2622,10 @@
 
 	memset(inarg, 0, sizeof(*inarg));
 	inarg->fh = ff->fh;
-	inarg->owner = vfuse_lock_owner_id(fc, fl->fl_owner);
+	inarg->owner = vfuse_lock_owner_id(fc, fl->c.flc_owner);
 	inarg->lk.start = fl->fl_start;
 	inarg->lk.end = fl->fl_end;
-	inarg->lk.type = fl->fl_type;
+	inarg->lk.type = fl->c.flc_type;
 	inarg->lk.pid = pid;
 	if (flock)
 		inarg->lk_flags |= VFUSE_LK_FLOCK;
@@ -2662,8 +2662,8 @@
 	struct vfuse_mount *fm = get_vfuse_mount(inode);
 	VFUSE_ARGS(args);
 	struct vfuse_lk_in inarg;
-	int opcode = (fl->fl_flags & FL_SLEEP) ? VFUSE_SETLKW : VFUSE_SETLK;
-	struct pid *pid = fl->fl_type != F_UNLCK ? task_tgid(current) : NULL;
+	int opcode = (fl->c.flc_flags & FL_SLEEP) ? VFUSE_SETLKW : VFUSE_SETLK;
+	struct pid *pid = fl->c.flc_type != F_UNLCK ? task_tgid(current) : NULL;
 	pid_t pid_nr = pid_nr_ns(pid, fm->fc->pid_ns);
 	int err;
 
@@ -2673,7 +2673,7 @@
 	}
 
 	/* Unlock on close is handled by the flush method */
-	if ((fl->fl_flags & FL_CLOSE_POSIX) == FL_CLOSE_POSIX)
+	if ((fl->c.flc_flags & FL_CLOSE_POSIX) == FL_CLOSE_POSIX)
 		return 0;
 
 	vfuse_lk_fill(&args, file, fl, opcode, pid_nr, flock, &inarg);
